{"version":3,"sources":["n1-main/m1-ui/header/Header.module.css","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a3-restorePassword/RestorePassword.tsx","n2-features/f1-auth/a2-registration/Registration.tsx","n2-features/f1-auth/a4-newPassword/NewPassword.tsx","n2-features/f1-auth/a5-profile/Profile.tsx","Other/Start.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/Main.tsx","n1-main/m2-bll/login-reducer.ts","n1-main/m2-bll/registration-reducer.ts","n1-main/m2-bll/restorePassword-reducer.ts","n1-main/m2-bll/newPassword-reducer.ts","n1-main/m2-bll/prifile-reducer.ts","n1-main/m2-bll/store.ts","n1-main/m1-ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Login","RestorePassword","Registration","NewPassword","Profile","Start","Routes","path","component","Header","className","style","wrapNavBar","to","Main","initialState","LoginReducer","state","action","type","RegistrationReducer","RestorePasswordReducer","NewPasswordReducer","ProfileReducer","reducers","combineReducers","login","register","rePass","newPass","profilePage","store","createStore","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,WAAa,6B,6LCShBC,EARD,WACV,OACI,uCCMOC,EARS,WACpB,OACI,kDCMOC,EARM,WACjB,OACI,8CCMOC,EARK,WAChB,OACI,8CCMOC,EARC,WACZ,OACI,yCCMOC,EARD,WACV,OACI,6CC0BOC,EAbA,WACX,OACI,6BACI,kBAAC,IAAD,CAAOC,KAXC,SAWWC,UAAWH,IAC9B,kBAAC,IAAD,CAAOE,KAXM,SAWWC,UAAWR,IACnC,kBAAC,IAAD,CAAOO,KAXa,gBAWWC,UAAWN,IAC1C,kBAAC,IAAD,CAAOK,KAXa,mBAWWC,UAAWP,IAC1C,kBAAC,IAAD,CAAOM,KAXS,eAWWC,UAAWL,IACtC,kBAAC,IAAD,CAAOI,KAXS,WAWWC,UAAWJ,M,iBCPnCK,EAbA,WACX,OACI,yBAAKC,UAAWC,IAAMC,YAClB,kBAAC,IAAD,CAASC,GDCD,UCDW,qCACnB,kBAAC,IAAD,CAASA,GDCI,UCDb,SACA,kBAAC,IAAD,CAASA,GDCW,iBCDpB,gBACA,kBAAC,IAAD,CAASA,GDCW,oBCDpB,oBACA,kBAAC,IAAD,CAASA,GDCO,gBCDhB,gBACA,kBAAC,IAAD,CAASA,GDCO,YCDhB,aCAGC,EATF,WACT,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,OCRRC,EAAe,GAWJC,EARM,WAA0D,IAAzDC,EAAwD,uDAA9BF,EAAcG,EAAgB,uCAGlE,OAFAA,EAAOC,KAEAF,GCNfF,EAAe,GAWJK,EARa,WAA0D,IAAzDH,EAAwD,uDAA9BF,EAAcG,EAAgB,uCAGzE,OAFAA,EAAOC,KAEAF,GCNfF,EAAe,GAWJM,EARgB,WAA0D,IAAzDJ,EAAwD,uDAA9BF,EAAcG,EAAgB,uCAG5E,OAFAA,EAAOC,KAEAF,GCNfF,EAAe,GAWJO,EARY,WAA0D,IAAzDL,EAAwD,uDAA9BF,EAAcG,EAAgB,uCAGxE,OAFAA,EAAOC,KAEAF,GCNfF,EAAe,GAWJQ,EARQ,WAA0D,IAAzDN,EAAwD,uDAA9BF,EAAcG,EAAgB,uCAGpE,OAFAA,EAAOC,KAEAF,GCEfO,EAAWC,YAAgB,CAC3BC,MAAOV,EACPW,SAAUP,EACVQ,OAAQP,EACRQ,QAASP,EACTQ,YAAaP,IAKFQ,EADHC,YAAYR,EAAUS,eCMnBC,EAfH,WACR,OACI,yBAAKxB,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUqB,MAAOA,GACb,oCACE,kBAAC,EAAD,WCFFI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa106b7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapNavBar\":\"Header_wrapNavBar__1P8n8\"};","import React from 'react';\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div>\r\n            LOGIN\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","import React from 'react';\r\n\r\nconst RestorePassword = () => {\r\n    return (\r\n        <div>\r\n            RESTORE_PASSWORD\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RestorePassword;","import React from 'react';\r\n\r\nconst Registration = () => {\r\n    return (\r\n        <div>\r\n           REGISTRATION\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Registration;","import React from 'react';\r\n\r\nconst NewPassword = () => {\r\n    return (\r\n        <div>\r\n            NEW_PASSWORD\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewPassword;","import React from 'react';\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div>\r\n            PROFILE\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\nconst Start = () => {\r\n    return (\r\n        <div>\r\n            Start pages\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Start;","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport Login from \"../../../n2-features/f1-auth/a1-login/Login\";\r\nimport RestorePassword from \"../../../n2-features/f1-auth/a3-restorePassword/RestorePassword\";\r\nimport Registration from \"../../../n2-features/f1-auth/a2-registration/Registration\";\r\nimport NewPassword from \"../../../n2-features/f1-auth/a4-newPassword/NewPassword\";\r\nimport Profile from \"../../../n2-features/f1-auth/a5-profile/Profile\";\r\nimport Start from \"../../../Other/Start\";\r\n\r\nexport const MENU = '/menu;'\r\nexport const SET_LOGIN = '/login';\r\nexport const NEW_REGISTRATION = '/registration';\r\nexport const RESTORE_PASSWORD = '/restorePassword';\r\nexport const NEW_PASSWORD = '/newPassword';\r\nexport const PROFILE_PAGE = '/profile';\r\n\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <div>\r\n            <Route path={MENU} component={Start}/>\r\n            <Route path={SET_LOGIN} component={Login}/>\r\n            <Route path={NEW_REGISTRATION} component={Registration}/>\r\n            <Route path={RESTORE_PASSWORD} component={RestorePassword}/>\r\n            <Route path={NEW_PASSWORD} component={NewPassword}/>\r\n            <Route path={PROFILE_PAGE} component={Profile}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Routes;","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {MENU, NEW_PASSWORD, NEW_REGISTRATION, PROFILE_PAGE, RESTORE_PASSWORD, SET_LOGIN} from \"../routes/Routes\";\r\nimport style from './Header.module.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav className={style.wrapNavBar}>\r\n            <NavLink to={MENU}><h3>MENU</h3></NavLink>\r\n            <NavLink to={SET_LOGIN}>Login</NavLink>\r\n            <NavLink to={NEW_REGISTRATION}>Registration</NavLink>\r\n            <NavLink to={RESTORE_PASSWORD}>Restore Password</NavLink>\r\n            <NavLink to={NEW_PASSWORD}>New Password</NavLink>\r\n            <NavLink to={PROFILE_PAGE}>Profile</NavLink>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./m1-ui/header/Header\";\r\nimport Routes from \"./m1-ui/routes/Routes\";\r\n\r\nconst Main = () => {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;","let initialState = {};\r\ntype initialStateType = typeof initialState\r\n\r\nconst LoginReducer = (state: initialStateType = initialState, action: any) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default LoginReducer;","let initialState = {};\r\ntype initialStateType = typeof initialState\r\n\r\nconst RegistrationReducer = (state: initialStateType = initialState, action: any) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default RegistrationReducer;","let initialState = {};\r\ntype initialStateType = typeof initialState\r\n\r\nconst RestorePasswordReducer = (state: initialStateType = initialState, action: any) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default RestorePasswordReducer;","let initialState = {};\r\ntype initialStateType = typeof initialState\r\n\r\nconst NewPasswordReducer = (state: initialStateType = initialState, action: any) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default NewPasswordReducer;","let initialState = {};\r\ntype initialStateType = typeof initialState\r\n\r\nconst ProfileReducer = (state: initialStateType = initialState, action: any) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default ProfileReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'react-redux';\r\nimport LoginReducer from \"./login-reducer\";\r\nimport RegistrationReducer from \"./registration-reducer\";\r\nimport RestorePasswordReducer from \"./restorePassword-reducer\";\r\nimport NewPasswordReducer from \"./newPassword-reducer\";\r\nimport ProfileReducer from \"./prifile-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    login: LoginReducer,\r\n    register: RegistrationReducer,\r\n    rePass: RestorePasswordReducer,\r\n    newPass: NewPasswordReducer,\r\n    profilePage: ProfileReducer\r\n});\r\n\r\n\r\nlet store = createStore(reducers, applyMiddleware());\r\nexport default store;","import React from 'react';\nimport './App.css';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport Main from \"../Main\";\nimport store from \"../m2-bll/store\";\n\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Provider store={store}>\n                    <>\n                      <Main/>\n\n                    </>\n                </Provider>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}